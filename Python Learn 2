Второй блок. Занятия 8-14.

Занятие 8: Основы баз данных

Результат занятия: приложение блог с базой данных и кешем, постраничным выводом статей, без стилей и скриптов.
•Какие бывают базы данных? Знакомство с `MySQL`, `PostgresSQL`, `SQLite` и `Redis`
•Основы РСУБД: таблицы и связи между ними (OneToOne, OneToMany, ManyToMany)
•Введение в `SQL`
•Проектирование баз данных, нормальные формы
•Транзакции, индексы
•Введение в `NoSQL`: `key-value` хранилище, установка `Redis`
•Введение в `ORM` на примере `SQLAlchemy` (для `SQLite`) и `redis-py`
•Написание моделей для блога, создание кеша в `Redis`, добавление постраничного вида

Занятие 9: Первый web-проект, frontend: CSS

Результат занятия: приложение блог, с css стилями
•Что такое `CSS`? Как работают селекторы?
•Классы, id, теги
•Зачем веб-страницам нужна сетка?
•Что такое адапативный дизайн? Знакомство с `media-query`
•Что такое `fallback`?
•Подходы к написанию `CSS`: mobile-first и наоборот
•Прогрессивное улучшение
•Методологии написания `CSS`: `bem` и другие
•Что такое компонент? И что такое `styleguide`?
•Установка `node.js`, `npm` и `bower`
•Почему так часто используют `Twitter Bootstrap`? Знакомство с библиотекой
•Написание стилей для своего блога

Занятие 10: Введение в JS

Результат занятия: небольшой проект на JS
•В чем схожести и отличия `javascript` от `Python`?
•Какой бывает `javascript`?
•Типы данных
•Структуры языка
•Область видимости переменных
•Функции, и что такое `this`?
•Объекты `window` и `document`
•Что такое `polyfill`?
•Как дебажить `js` приложение?
•Написание своего небольшого frontend-проекта

Занятие 11: Первый web-проект, frontend: jQuery

Результат занятия: предварительный frontend для своего приложения
•Что такое библиотека `jQuery`?
•Когда она нужна, когда без нее можно обойтись, а когда она нежелательна?
•Методологии огранизации кода или "Как варить лапшу"
•Событийная модель браузера
•Знакомство с `$.ajax()` и `CORS`
•Манипуляции с `DOM`
•Улучшение производительности кода
•Написание frontend для своего проекта

Занятие 12: Автоматизация рутинных задач с Grunt

Результаты занятий: готовый frontend для своего приложения
•Зачем нужна автоматизация задач? 
•В чем разница между ``
•Улучшение `CSS` с `autoprefixer`
•Знакомство с `PostCSS` и два слова о препроцессорах
•Уменьшение размера текстовых файлов и картинок
•Модульная система для `js` на примере `browserify`
•Моментальное изменение страницы с `liveserver`
•Зачем нужна система версий для статических файлов?
•Создание `Gruntfile.js`, первый build frontend'а

Занятие 13: Django

Результат занятия: написан скелет будущего приложения Django
•Что такое `Django`? И как работает данный фреймворк?
•Какой путь проходит запрос в жизненном цикле приложения?
•Знакомство с Middleware
•url-routing, `include()` и `reverse()`
•`Django`'s MVT, знакомство с `Django-Templates`
•`views` и `class-based views`
•Простые формы, валидация форм
•Статические файлы
•Организация настроек приложения
•Написание скелета будущего проекта

Занятие 14: Django ORM

Результат занятия: написание моделей к приложению
•Знакомство с моделями
•Установка и настройка `PostgreSQL`
•Отношения моделей между собой: `OneToOne`, `ManyToMany` и `ForeingKey`
•Как написать запрос?
•Как написать сложный запрос? `annotate()`, `aggregate()`
•Сигналы
•Миграции, обзор исторического `South` и текущего `Django-Migrations`
•Написание моделей к приложению
