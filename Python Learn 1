Первый блок. Занятия 1-7.

Занятие 1: Введение

Результат занятия: настроенная среда, библиотека с основами синтаксиса и типов данных, на которые можно опереться в дальнейшем.
•Общее знакомство с `Python`, его историей и перспективами
•Общее знакомство с версиями `Python` 2.7 и 3
•Настройка и установка `Python` 2.7 и 3 на локальные машины
•Установка `SublimeText`(Text Editor)
•Настройка и установка `git`, регистрация на github
•`print 'Hello Pythonic world!'`, первый commit и push на github
•Детальный разбор, что же произошло в пункте выше
•Знакомство с базовым синтаксисом, базовые типы данных
•Что такое переменная? Как ее объявить, и где ее видно?
•Знакомство со структурами языка: ветвления, циклы, условия
•Stackoverflow-driven development, секция о том, как самому найти ответы на свои вопросы

Занятие 2: 

Результат занятия: приложение-игра, "крестики-нолики" в консоли.
•Знакомство с командной строкой
•Управление зависимостями, `pip`, установка первых внешних пакетов
•Знакомство с `virtualenv`, создание среды
•Установка `PyCharm`(IDE)
•Продолжение знакомства с типами данных в `Python`, принцип "присваивание никогда не копирует данные": массивы, словари, кортежи
•Что такое Функция? Введение в функциональное программирование
•Обработка исплючений
•Дебаг приложения
•Написание игры "крестики-нолики" в функциональном стиле

Занятие 3: ООП

Результат занятия: приложение "список дел и покупок".
•Что такое Объект? Знакомство с ООП
•Принципы ООП: абстракция, наследование, инкапсуляция, полиморфизм
•Волшебные методы и константы: `__init__()`, `__str__()` и `__dict__`
•`Python`'s `super()`, `mro()`, новые и старые классы
•`@staticmethod` и `@classmethod`, переменные класса
•Принципы проектирования: наследование, агрегация и композиция
•Продолжение знакомства с языком `Python`: декораторы, свойства, генераторы, `lambda`, `list-comprehension`
•Zen of Python
•Написание приложения "список дел и покупок" в объектном стиле

Занятие 4: Версии Python, межверсионный код

Результат занятия: ?
•В чем основные отличия `Python` 2 и 3? 
•`str` и `unicode`
•Другие важные изменения
•Какую версию интерпретатора выбрать для нового проекта?
•Как писать код под обе версии `Python`? Знакомство с `six`, `2to3`, `3to2`
•Наступившее будущее: что нового в `Python` 3.5?
•Могу ли я улучшить `Python`? Или что такое `PEP`
•Написать ?

Занятие 5: Усложнение программ

Результат занятия: приложение-игра "морской бой" с ИИ.
•Принципы разработки ПО: DRY, KISS, YAGNI, SOLID
•Частые ошибки при написании кода
•Работа с файлами
•Текстовые форматы обмена данными: `.json`, `.csv`, и как с ними работать
•Какие есть способы завершить приложение?
•Написания игры "морской бой" с ИИ с сохранением игры, в объектном стиле

Занятие 6: Создание веб-паука

Результат занятия: приложение, которое бы заходило на страницу соц.сети и забирало оттуда все статусы и/или фотографии.
•Как устроен интернет? Знакомство с `TCP/IP`, `DNS` и клиент-серверной архитектурой
•Зачем нам `http` перед адресом? Знакомство с протоколом `HTTP` с модулем `urllib`
•Что такое регулярное выражение? Модуль `re`
•Что такое веб-страница? Основы `HTML` разметки, знакомство с `HTML5` тегами
•Написание веб-паука на основе `Scrapy`, который будет получать статусы со страницы соц.сети и сохранять результаты в файле

Занятие 7: Первый web-проект, backend

Результат занятия: приложение-блог без базы данных, без стилей и скриптов
•Что такое backend и frontend?
•Как работает сервер на примере `Flask`?
•Какой путь проходит запрос, и какие бывают запросы?
•Введение в `MVC` и `MTV`
•Как происходит роутинг?
•Что такое шаблон? И как работать с `Jinja2`?
•Зачем нужны формы, и как с ними работать?
•Написание первого web-приложения
